--// Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

--// GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ExampleGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = game:GetService("CoreGui")

-- Outer frame
local outerFrame = Instance.new("Frame")
outerFrame.Size = UDim2.new(0.6, 0, 0.7, 0)
outerFrame.Position = UDim2.new(0.15, 0, 0.15, 0)
outerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
outerFrame.BorderSizePixel = 0
outerFrame.Parent = screenGui

-- Inner frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.8, 0, 0.9, 0)
frame.Position = UDim2.new(0.199, 0, 0.1, -5)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.Parent = outerFrame

-- Toggle button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0.12, 0, 0.05, 0)
toggleButton.Position = UDim2.new(0.44, 0, 0.85, 0)
toggleButton.Text = "Hide Frame"
toggleButton.TextColor3 = Color3.fromRGB(255,255,255)
toggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
toggleButton.Parent = screenGui

toggleButton.Activated:Connect(function()
    outerFrame.Visible = not outerFrame.Visible
    toggleButton.Text = outerFrame.Visible and "Hide Frame" or "Show Frame"
end)

-- Drag functionality
local dragging = false
local dragStart = Vector2.new()
local startPos = UDim2.new()

toggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = toggleButton.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

toggleButton.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
        local delta = input.Position - dragStart
        local screenSize = toggleButton.Parent.AbsoluteSize
        toggleButton.Position = UDim2.new(
            startPos.X.Scale + delta.X / screenSize.X,
            0,
            startPos.Y.Scale + delta.Y / screenSize.Y,
            0
        )
    end
end)

-- Selected item label
local selectedLabel = Instance.new("TextLabel")
selectedLabel.Size = UDim2.new(0.38,0,0.08,0)
selectedLabel.Position = UDim2.new(0.45,0,0.05,0)
selectedLabel.Text = "Selected Item: None"
selectedLabel.TextColor3 = Color3.fromRGB(255,255,255)
selectedLabel.BackgroundColor3 = Color3.fromRGB(50,50,50)
selectedLabel.TextScaled = true
selectedLabel.TextWrapped = true
selectedLabel.Parent = frame

-- Left scrolling frame
local scrollFrameLeft = Instance.new("ScrollingFrame")
scrollFrameLeft.Size = UDim2.new(0.2,0,0.7,0)
scrollFrameLeft.Position = UDim2.new(0.48,0,0.15,0)
scrollFrameLeft.CanvasSize = UDim2.new(0,0,0,0)
scrollFrameLeft.ScrollBarThickness = 8
scrollFrameLeft.BackgroundColor3 = Color3.fromRGB(35,35,35)
scrollFrameLeft.Parent = frame

local listLayoutLeft = Instance.new("UIListLayout")
listLayoutLeft.SortOrder = Enum.SortOrder.LayoutOrder
listLayoutLeft.Padding = UDim.new(0,2)
listLayoutLeft.Parent = scrollFrameLeft

listLayoutLeft:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollFrameLeft.CanvasSize = UDim2.new(0,0,0,listLayoutLeft.AbsoluteContentSize.Y)
end)

-- Right scrolling frame
local scrollFrameRight = Instance.new("ScrollingFrame")
scrollFrameRight.Size = UDim2.new(0.3,0,0.7,0)
scrollFrameRight.Position = UDim2.new(0.7,0,0.15,0)
scrollFrameRight.CanvasSize = UDim2.new(0,0,0,0)
scrollFrameRight.ScrollBarThickness = 8
scrollFrameRight.BackgroundColor3 = Color3.fromRGB(35,35,35)
scrollFrameRight.Parent = frame

local listLayoutRight = Instance.new("UIListLayout")
listLayoutRight.SortOrder = Enum.SortOrder.LayoutOrder
listLayoutRight.Padding = UDim.new(0,2)
listLayoutRight.Parent = scrollFrameRight

listLayoutRight:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollFrameRight.CanvasSize = UDim2.new(0,0,0,listLayoutRight.AbsoluteContentSize.Y)
end)

-- Create buttons
local function createButton(text, posY)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.15,0,0.08,0)
    btn.Position = UDim2.new(0.3,0,posY,0)
    btn.Text = text
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.BackgroundColor3 = Color3.fromRGB(80,80,80)
    btn.Parent = frame
    return btn
end

local bringAllButton = createButton("Bring All",0.15)
local bringOneButton = createButton("Bring One",0.25)
local bringAllItemButton = createButton("Bring All of Item",0.35)
local mouseSphereButton = createButton("Mouse Sphere",0.45)
local bringAllOnePosButton = createButton("Bring All of One Pos",0.55)
local loopBringButton = createButton("Loop Bring",0.65)

-- Y-level textbox
local yLevelBox = Instance.new("TextBox")
yLevelBox.Size = UDim2.new(0.15,0,0.05,0)
yLevelBox.Position = UDim2.new(0.3,0,0.75,0)
yLevelBox.PlaceholderText = "Y-Level Offset"
yLevelBox.Text = "5"
yLevelBox.ClearTextOnFocus = false
yLevelBox.TextColor3 = Color3.fromRGB(255,255,255)
yLevelBox.BackgroundColor3 = Color3.fromRGB(60,60,60)
yLevelBox.Parent = frame

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0.15,0,0.08,0)
closeButton.Position = UDim2.new(0.85,0,0,0)
closeButton.Text = "Close"
closeButton.TextColor3 = Color3.fromRGB(255,255,255)
closeButton.BackgroundColor3 = Color3.fromRGB(80,80,80)
closeButton.Parent = outerFrame

closeButton.Activated:Connect(function()
    if toggleButton then toggleButton:Destroy() end
    outerFrame:Destroy()
end)

-- Helper to move models
local function moveModelTo(model, position)
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CFrame = CFrame.new(position)
        end
    end
end

-- Helper: get top-level physical model from a part
local function getTopPhysicalModel(part)
    local current = part
    while current and current.Parent ~= workspace do
        if current.Parent:IsA("Model") then
            current = current.Parent
        else
            break
        end
    end
    if current and current.Parent == workspace and current:IsA("Model") and current.Name:lower() ~= "model" then
        for _, child in ipairs(current:GetChildren()) do
            if child:IsA("BasePart") and child.CanCollide and not child.Anchored and child.Transparency < 1 then
                return current
            end
        end
    end
    return nil
end

-- Helper to get top-level physical model from a part, ignoring "Model" and "mutant"
local function getTopPhysicalModel(part)
    local current = part
    while current and current.Parent ~= workspace do
        if current.Parent:IsA("Model") then
            current = current.Parent
        else
            break
        end
    end
    if current and current.Parent == workspace and current:IsA("Model") then
        local lname = current.Name:lower()
        if lname == "model" or lname:find("mutant") then
            return nil
        end
        for _, child in ipairs(current:GetChildren()) do
            if child:IsA("BasePart") and child.CanCollide and not child.Anchored and child.Transparency < 1 then
                return current
            end
        end
    end
    return nil
end

-- Get all unique top-level physical models in workspace
local function getAllPhysicalTopModels()
    local models = {}
    local seen = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") and obj.CanCollide and not obj.Anchored and obj.Transparency < 1 then
            local topModel = getTopPhysicalModel(obj)
            if topModel and not seen[topModel] then
                seen[topModel] = true
                table.insert(models, topModel)
            end
        end
    end
    return models
end


-- Bring All button
bringAllButton.Activated:Connect(function()
    local character = LocalPlayer.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, child in ipairs(scrollFrameRight:GetChildren()) do
        if child:IsA("TextLabel") then child:Destroy() end
    end

    local movedModels = {}
    for _, model in ipairs(getAllPhysicalTopModels()) do
        moveModelTo(model, hrp.Position + Vector3.new(0,5,0))
        table.insert(movedModels, model.Name)
    end

    for _, name in ipairs(movedModels) do
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1,0,0,30)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255,255,255)
        label.TextScaled = true
        label.TextWrapped = true
        label.Text = name
        label.Parent = scrollFrameRight
    end
end)

-- Bring One button
bringOneButton.Activated:Connect(function()
    local selectedName = selectedLabel.Text:gsub("Selected Item: ","")
    if selectedName == "None" then return end
    local character = LocalPlayer.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, model in ipairs(getAllPhysicalTopModels()) do
        if model.Name == selectedName then
            moveModelTo(model, hrp.Position + Vector3.new(0,5,0))
            break
        end
    end
end)

-- Bring All of Item button
bringAllItemButton.Activated:Connect(function()
    local selectedName = selectedLabel.Text:gsub("Selected Item: ","")
    if selectedName == "None" then return end
    local character = LocalPlayer.Character
    if not character then return end
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local count = 0
    for _, model in ipairs(getAllPhysicalTopModels()) do
        if model.Name == selectedName then
            moveModelTo(model, hrp.Position + Vector3.new(0,5,0))
            count = count + 1
        end
    end

    if count > 0 then
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1,0,0,30)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255,255,255)
        label.TextScaled = true
        label.TextWrapped = true
        label.Text = selectedName.." x="..count
        label.Parent = scrollFrameRight
    end
end)

-- Update nearby items list
local function updateNearbyItems()
    while frame.Parent do
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local hrp = character.HumanoidRootPart

            for _, child in ipairs(scrollFrameLeft:GetChildren()) do
                if child:IsA("TextButton") then child:Destroy() end
            end

            local modelCounts = {}
            for _, model in ipairs(getAllPhysicalTopModels()) do
                local closestPart = model:FindFirstChildWhichIsA("BasePart", true)
                if closestPart and (closestPart.Position - hrp.Position).Magnitude <= 10000000 then
                    modelCounts[model.Name] = (modelCounts[model.Name] or 0) + 1
                end
            end

            for modelName, count in pairs(modelCounts) do
                local btn = Instance.new("TextButton")
                btn.Size = UDim2.new(.9,0,0,50)
                btn.BackgroundColor3 = Color3.fromRGB(80,80,80)
                btn.TextColor3 = Color3.fromRGB(255,255,255)
                btn.TextScaled = true
                btn.TextWrapped = true
                btn.Text = modelName.."  x="..count
                btn.Parent = scrollFrameLeft
                btn.Activated:Connect(function()
                    selectedLabel.Text = "Selected Item: "..modelName
                end)
            end
        end
        wait(1)
    end
end

spawn(updateNearbyItems)

-- Mouse sphere & Loop Bring setup
local sphere, ySphere = nil, nil
local sphereLocked = false
local loopBring = false

mouseSphereButton.Activated:Connect(function()
    if sphere and sphere.Parent then
        sphere:Destroy()
        sphere = nil
        if ySphere then ySphere:Destroy() ySphere = nil end
        sphereLocked = false
        loopBring = false
        mouseSphereButton.Text = "Mouse Sphere"
    else
        sphere = Instance.new("Part")
        sphere.Shape = Enum.PartType.Ball
        sphere.Size = Vector3.new(0.5,0.5,0.5)
        sphere.Color = Color3.fromRGB(0,170,255)
        sphere.Material = Enum.Material.Neon
        sphere.Anchored = true
        sphere.CanCollide = false
        sphere.Parent = workspace

        ySphere = Instance.new("Part")
        ySphere.Shape = Enum.PartType.Ball
        ySphere.Size = Vector3.new(0.5,0.5,0.5)
        ySphere.Color = Color3.fromRGB(255,50,50)
        ySphere.Material = Enum.Material.Neon
        ySphere.Anchored = true
        ySphere.CanCollide = false
        ySphere.Parent = workspace

        mouseSphereButton.Text = "Stop Sphere"
    end
end)

RunService.RenderStepped:Connect(function()
    if sphere and sphere.Parent and ySphere and ySphere.Parent and not sphereLocked then
        local mousePos = UserInputService:GetMouseLocation()
        local ray = Camera:ViewportPointToRay(mousePos.X, mousePos.Y)
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.IgnoreWater = true
        raycastParams.FilterDescendantsInstances = {sphere, ySphere}
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr.Character then
                table.insert(raycastParams.FilterDescendantsInstances, plr.Character)
            end
        end
        local rayResult = workspace:Raycast(ray.Origin, ray.Direction * 500, raycastParams)
        if rayResult then
            sphere.Position = rayResult.Position
        elseif sphere.Position then
            sphere.Position = sphere.Position
        else
            sphere.Position = Camera.CFrame.Position + Camera.CFrame.LookVector * 5
        end
        local yOffset = tonumber(yLevelBox.Text) or 5
        ySphere.Position = sphere.Position + Vector3.new(0,yOffset,0)
    end

    if loopBring then
        local selectedName = selectedLabel.Text:gsub("Selected Item: ","")
        if selectedName ~= "None" and ySphere and ySphere.Parent then
            local targetPos = ySphere.Position
            for _, model in ipairs(getAllPhysicalTopModels()) do
                if model.Name == selectedName then
                    moveModelTo(model, targetPos)
                end
            end
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.P and sphere and sphere.Parent then
        sphereLocked = not sphereLocked
        mouseSphereButton.Text = sphereLocked and "Sphere Locked" or "Stop Sphere"
    end
end)

bringAllOnePosButton.Activated:Connect(function()
    if not ySphere or not ySphere.Parent then return end
    local selectedName = selectedLabel.Text:gsub("Selected Item: ","")
    if selectedName == "None" then return end
    local targetPos = ySphere.Position
    local count = 0
    for _, model in ipairs(getAllPhysicalTopModels()) do
        if model.Name == selectedName then
            moveModelTo(model, targetPos)
            count = count + 1
        end
    end
    if count > 0 then
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1,0,0,30)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255,255,255)
        label.TextScaled = true
        label.TextWrapped = true
        label.Text = selectedName.." x="..count
        label.Parent = scrollFrameRight
    end
end)

loopBringButton.Activated:Connect(function()
    loopBring = not loopBring
    loopBringButton.Text = loopBring and "Stop Loop" or "Loop Bring"
end)
