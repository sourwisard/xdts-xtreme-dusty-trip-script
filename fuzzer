-- ClientFuzzerUI.lua  (LocalScript, StarterPlayerScripts)
-- REQUIRES ReplicatedStorage.FuzzerRegister, ReplicatedStorage.FuzzerLog, and RemoteEvents to fuzz.
-- WARNING: Only run in test/staging environments.

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")


local LOCAL_PLAYER = Players.LocalPlayer

-- UI construction (programmatic) -------------------------------------------------
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FuzzerUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = LOCAL_PLAYER:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 420, 0, 520)
mainFrame.Position = UDim2.new(0, 20, 0, 20)
mainFrame.BackgroundTransparency = 0.12
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local title = Instance.new("TextLabel")
title.Parent = mainFrame
title.Size = UDim2.new(1, 0, 0, 32)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Fuzzer UI (test only)"
title.TextColor3 = Color3.new(1,1,1)
title.Font = Enum.Font.GothamBold
title.TextSize = 16

-- Controls column
local controls = Instance.new("Frame")
controls.Parent = mainFrame
controls.Size = UDim2.new(0, 200, 1, -40)
controls.Position = UDim2.new(0, 8, 0, 40)
controls.BackgroundTransparency = 1

local UIList = Instance.new("UIListLayout")
UIList.Parent = controls
UIList.SortOrder = Enum.SortOrder.LayoutOrder
UIList.Padding = UDim.new(0, 6)

local function makeLabel(txt)
	local l = Instance.new("TextLabel")
	l.Size = UDim2.new(1, 0, 0, 22)
	l.BackgroundTransparency = 1
	l.Text = txt
	l.TextColor3 = Color3.new(1,1,1)
	l.Font = Enum.Font.Gotham
	l.TextSize = 14
	l.TextXAlignment = Enum.TextXAlignment.Left
	l.Parent = controls
	return l
end

local function makeButton(txt)
	local b = Instance.new("TextButton")
	b.Size = UDim2.new(1, 0, 0, 28)
	b.BackgroundColor3 = Color3.fromRGB(50,50,50)
	b.Text = txt
	b.TextColor3 = Color3.new(1,1,1)
	b.Font = Enum.Font.Gotham
	b.TextSize = 14
	b.Parent = controls
	return b
end

local function makeToggle(text, initial)
	local holder = Instance.new("Frame")
	holder.Size = UDim2.new(1,0,0,26)
	holder.BackgroundTransparency = 1
	holder.Parent = controls

	local lbl = Instance.new("TextLabel")
	lbl.Size = UDim2.new(0.7, 0, 1, 0)
	lbl.Position = UDim2.new(0, 0, 0, 0)
	lbl.BackgroundTransparency = 1
	lbl.Text = text
	lbl.TextColor3 = Color3.new(1,1,1)
	lbl.Font = Enum.Font.Gotham
	lbl.TextSize = 14
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	lbl.Parent = holder

	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0.28, 0, 1, 0)
	btn.Position = UDim2.new(0.72, 0, 0, 0)
	btn.BackgroundColor3 = initial and Color3.fromRGB(0,150,0) or Color3.fromRGB(120,120,120)
	btn.Text = initial and "ON" or "OFF"
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 12
	btn.Parent = holder

	return btn
end

makeLabel("Presets:")
local presetDropdown = Instance.new("TextButton")
presetDropdown.Size = UDim2.new(1,0,0,28)
presetDropdown.Text = "Quick preset"
presetDropdown.Parent = controls
presetDropdown.Font = Enum.Font.Gotham
presetDropdown.TextSize = 14
presetDropdown.BackgroundColor3 = Color3.fromRGB(50,50,50)
presetDropdown.TextColor3 = Color3.new(1,1,1)

makeLabel("Options:")
local destructiveToggle = makeToggle("Enable destructive tests", false)
local instancesToggle = makeToggle("Send Instances", false)

local startButton = makeButton("Start Fuzz")
local stopButton = makeButton("Stop Fuzz")
stopButton.BackgroundColor3 = Color3.fromRGB(90, 20, 20)

local clearButton = makeButton("Clear Log")
clearButton.BackgroundColor3 = Color3.fromRGB(60,60,60)

-- Log area
local logFrame = Instance.new("Frame")
logFrame.Size = UDim2.new(0, 200, 1, -40)
logFrame.Position = UDim2.new(0, 212, 0, 40)
logFrame.BackgroundTransparency = 1
logFrame.Parent = mainFrame

local scroll = Instance.new("ScrollingFrame")
scroll.Parent = logFrame
scroll.Size = UDim2.new(1, 0, 1, 0)
scroll.CanvasSize = UDim2.new(0,0,0,0)
scroll.BackgroundColor3 = Color3.fromRGB(18,18,18)
scroll.BackgroundTransparency = 0.1
scroll.BorderSizePixel = 0
scroll.ScrollBarThickness = 8

local layout = Instance.new("UIListLayout")
layout.Parent = scroll
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Padding = UDim.new(0,4)

-- track message count and cap
local MAX_MESSAGES = 600
local msgCount = 0

local function appendLog(str, color)
	-- create label
	local lbl = Instance.new("TextLabel")
	lbl.Size = UDim2.new(1, -8, 0, 18)
	lbl.BackgroundTransparency = 1
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	lbl.TextSize = 13
	lbl.Font = Enum.Font.Gotham
	lbl.Text = str
	lbl.TextWrapped = true
	lbl.TextColor3 = color or Color3.new(1,1,1)
	lbl.Parent = scroll

	msgCount = msgCount + 1
	-- prune old
	if msgCount > MAX_MESSAGES then
		local first = nil
		for _, v in ipairs(layout:GetChildren()) do
			-- UIListLayout children include UIListLayout itself; filter labels
			if v:IsA("TextLabel") then
				first = v
				break
			end
		end
		if first then first:Destroy() end
		msgCount = msgCount - 1
	end

	-- update canvas size
	task.defer(function()
		local target = 0
		for _, child in ipairs(scroll:GetChildren()) do
			if child:IsA("TextLabel") then
				target = target + child.AbsoluteSize.Y + layout.Padding.Offset
			end
		end
		scroll.CanvasSize = UDim2.new(0, 0, 0, target + 8)
		-- auto-scroll to bottom
		scroll.CanvasPosition = Vector2.new(0, math.max(0, scroll.CanvasSize.Y.Offset - scroll.AbsoluteSize.Y))
	end)
end

-- Simple presets list
local PRESETS = {
	["Quick preset"] = { attempts = 6, delay = 0.35, destructive = false, sendInstances = false },
	["Aggressive preset"] = { attempts = 25, delay = 0.15, destructive = false, sendInstances = false },
	["Destructive preset"] = { attempts = 50, delay = 0.1, destructive = true, sendInstances = false },
}

-- Interaction logic ------------------------------------------------------------
local running = false
local stopToken = false




-- Wire up UI controls
local selectedPreset = "Quick preset"
presetDropdown.MouseButton1Click:Connect(function()
	-- cycle through presets
	local keys = {}
	for k,_ in pairs(PRESETS) do table.insert(keys,k) end
	table.sort(keys)
	local i = 1
	for idx, k in ipairs(keys) do if k == selectedPreset then i = idx break end end
	i = i + 1
	if i > #keys then i = 1 end
	selectedPreset = keys[i]
	presetDropdown.Text = selectedPreset
end)

local function boolFromBtn(btn)
	return btn.Text == "ON"
end

local function toggleButton(btn)
	if btn.Text == "ON" then
		btn.Text = "OFF"
		btn.BackgroundColor3 = Color3.fromRGB(120,120,120)
	else
		btn.Text = "ON"
		btn.BackgroundColor3 = Color3.fromRGB(0,150,0)
	end
end

destructiveToggle.MouseButton1Click:Connect(function() toggleButton(destructiveToggle) end)
instancesToggle.MouseButton1Click:Connect(function() toggleButton(instancesToggle) end)

clearButton.MouseButton1Click:Connect(function()
	for _, c in ipairs(scroll:GetChildren()) do
		if c:IsA("TextLabel") then c:Destroy() end
	end
	msgCount = 0
	scroll.CanvasSize = UDim2.new(0,0,0,0)
end)

-- Fuzzer internals (payload generators) ---------------------------------------
local function gen_long_string(len)
	return string.rep("X", len)
end

local function gen_null_string()
	return "NULL_BYTE:" .. string.char(0) .. ":END"
end

local function gen_injection_strings()
	return {
		"'; DROP TABLE users; --",
		"\"; os.execute('rm -rf /') ;\"",
		"<script>alert(1)</script>",
		"' OR 1=1 --",
		"\\\\../../etc/passwd",
		"admin';--",
	}
end

local function gen_number_variants()
	return {0, -1, -999999999, 2^31, 2^63, math.huge, -math.huge, 3.14159, -3.14159}
end

local function gen_deep_table(depth, breadth)
	depth = depth or 6
	breadth = breadth or 4
	local function make(d)
		if d <= 0 then return { value = "leaf" } end
		local t = {}
		for i = 1, breadth do
			t["k"..i] = make(d-1)
		end
		return t
	end
	return make(depth)
end

local function gen_big_table(entries)
	entries = entries or 1200
	local t = {}
	for i = 1, entries do
		t["k"..i] = "v"..i
	end
	return t
end

local function gen_many_args(n)
	n = n or 50
	local out = {}
	for i = 1, n do
		if i % 5 == 0 then
			table.insert(out, gen_long_string(200))
		elseif i % 7 == 0 then
			table.insert(out, {i = i})
		else
			table.insert(out, i)
		end
	end
	return out
end

local function gen_instance_samples()
	local samples = {}
	if instancesToggle.Text == "ON" then
		if LOCAL_PLAYER.Character then
			table.insert(samples, LOCAL_PLAYER.Character)
		end
		if workspace:FindFirstChild("Terrain") then
			table.insert(samples, workspace.Terrain)
		end
	end
	return samples
end

local PAYLOAD_BUILDERS = {
	function() return {} end,
	function() return { "fuzzer-short" } end,
	function() return { gen_long_string(1024) } end,
	function() return { gen_long_string(50000) } end,
	function() return { gen_null_string() } end,
	function()
		local s = gen_injection_strings()
		return { s[math.random(1, #s)] }
	end,
	function()
		local nums = gen_number_variants()
		return { nums[math.random(1, #nums)] }
	end,
	function() return { gen_deep_table(8, 4) } end,
	function() return { gen_big_table(500) } end,
	function() return gen_many_args(60) end,
	function() return { "cmd:give", "Player", { id = math.random(1,999999) }, -1 } end,
	function() return { true, false, nil, nil, "end" } end,
	function()
		local insts = gen_instance_samples()
		if #insts > 0 then
			return { insts[math.random(1, #insts)], "test" }
		else
			return { "no-instance-available" }
		end
	end,
	function()
		if destructiveToggle.Text == "ON" then
			return { "ADMIN:MAKE_ALL", 999999, true }
		else
			return { "admin_try_skipped" }
		end
	end,
}

-- main fuzzer runner ----------------------------------------------------------
local function getAllRemotes()
	local list = {}
	for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
		if obj:IsA("RemoteEvent") then
			-- basic ignore heuristics
			local name = obj.Name
			if name:find("Admin") or name:find("Purchase") or name:find("Payment") or name:find("Economy") then
				appendLog("[Fuzzer] Skipping remote (heuristic): " .. obj:GetFullName(), Color3.fromRGB(200,100,100))
			else
				table.insert(list, obj)
			end
		end
	end
	return list
end

local fuzzerTask = nil

local function startFuzzer(attemptsPerRemote, delayBetweenCalls, maxTotalCalls)
	if running then return end
	running = true
	stopToken = false
	appendLog("[Fuzzer] Starting fuzz (preset: "..tostring(selectedPreset)..")", Color3.fromRGB(120,220,120))

	fuzzerTask = task.spawn(function()
		math.randomseed(tick() + os.time())
		local remotes = getAllRemotes()
		appendLog("[Fuzzer] Found " .. #remotes .. " remotes", Color3.fromRGB(180,180,255))
		local totalCalls = 0
		for _, remote in ipairs(remotes) do
			if stopToken then break end
			local attempts = 0
			while attempts < attemptsPerRemote and (not stopToken) and (totalCalls < (maxTotalCalls or 2000)) do
				attempts = attempts + 1
				totalCalls = totalCalls + 1

				-- pick payload builder
				local builder = PAYLOAD_BUILDERS[(attempts % #PAYLOAD_BUILDERS) + 1]
				if math.random() < 0.18 then
					builder = PAYLOAD_BUILDERS[math.random(1, #PAYLOAD_BUILDERS)]
				end

				local payload = {}
				local ok, res = pcall(builder)
				if ok and type(res) == "table" then payload = res else payload = { "fuzzer-default" } end

				-- clamp some values unless destructive is explicitly ON
				if destructiveToggle.Text ~= "ON" then
					for i,v in ipairs(payload) do
						if type(v) == "string" and #v > 10000 then
							payload[i] = string.sub(v, 1, 10000) .. "...(clamped)"
						elseif type(v) == "table" then
							-- shallow clamp large tables
							local count = 0
							for _ in pairs(v) do
								count = count + 1
								if count > 500 then break end
							end
							if count > 500 then
								payload[i] = { __clamped = true, size = count }
							end
						end
					end
				end

				-- try to send
				local ok2, err = pcall(function()
					remote:FireServer(table.unpack(payload))
				end)
				if ok2 then
					appendLog(string.format("[Local] Fired %s payloadLen=%d", remote:GetFullName(), #payload), Color3.fromRGB(200,200,200))
				else
					appendLog(string.format("[Local] ERROR firing %s : %s", remote:GetFullName(), tostring(err)), Color3.fromRGB(220,130,130))
				end

				task.wait(delayBetweenCalls)
			end
			appendLog(string.format("[Fuzzer] Completed on %s attempts=%d", remote:GetFullName(), attempts), Color3.fromRGB(170,180,200))
			task.wait(0.2)
		end

		appendLog("[Fuzzer] Finished totalCalls=" .. tostring(totalCalls), Color3.fromRGB(120,220,120))
		running = false
	end)
end

local function stopFuzzer()
	stopToken = true
	if fuzzerTask then
		-- no direct cancel necessary; loop will break on stopToken
		fuzzerTask = nil
	end
	running = false
	appendLog("[Fuzzer] Stop requested", Color3.fromRGB(200,160,60))
end

-- wire start/stop buttons using presets
startButton.MouseButton1Click:Connect(function()
	local p = PRESETS[selectedPreset] or PRESETS["Quick preset"]
	startFuzzer(p.attempts, p.delay, 1000)
end)
stopButton.MouseButton1Click:Connect(function()
	stopFuzzer()
end)

-- register immediately so server monitor can send logs
appendLog("[Fuzzer] UI initialized. Press Start Fuzz to begin.", Color3.fromRGB(180,220,180))

-- optional: respond to keyboard toggles
RunService.Heartbeat:Connect(function() end)
